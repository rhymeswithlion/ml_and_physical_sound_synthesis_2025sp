import hashlib
import subprocess
import tempfile
from functools import cached_property
from pathlib import Path

import FAUSTPy
import jinja2

from audio_utils import DEFAULT_SAMPLE_RATE, AudioClip

TMP_DIR = Path("/tmp/pyfaust")


class FaustProcessor:
    EXTENSION = ".dsp"

    def __init__(self, code, name="my_faust", fs=DEFAULT_SAMPLE_RATE, **params):
        def _remove_comments(c):
            return "\n".join(
                [line for line in c.split("\n") if not line.strip().startswith("#")]
            )

        code = _remove_comments(code)
        self.code = jinja2.Template(code).render(**params)
        self.name = name
        self.fs = fs
        self.dsp = None
        self.td = None
        self.process_svg_path = None

    @cached_property
    def sha256(self):
        return hashlib.sha256(self.code.encode()).hexdigest()

    @cached_property
    def friendly_name(self):
        import randomname

        return randomname.get_name(seed=self.sha256).replace("-", "_")

    def show_signal_graph(self):
        from IPython.display import SVG, display

        # resize
        display(SVG(filename=self.process_svg_path.as_posix()))

    def compute(self, dsp_input):
        out = self.dsp.compute(dsp_input)

        out = AudioClip(out, sr=self.fs)

        return out

    def __enter__(self):
        with tempfile.TemporaryDirectory(delete=False) as td:
            self.td = td

            # write to self.name with the sha256
            self.path = Path(td) / f"{self.name}{self.EXTENSION}"

            self.path.parent.mkdir(parents=True, exist_ok=True)
            self.path.write_text(self.code)

            # write a special file called pyfaust.txt
            (Path(td) / "pyfaust.txt").write_text(
                """This file is generated by pyfaust."""
            )

            # Create svg a la ! faust -svg try_faust.dsp > /dev/null
            try:
                subprocess.check_output(["faust", "-svg", self.path.as_posix()])
            except subprocess.CalledProcessError as e:
                raise RuntimeError(f"Error generating SVG: {e.output.decode()}")
            process_svg_path = Path(td) / f"{self.name}-svg/process.svg"
            self.process_svg_path = process_svg_path

            if not process_svg_path.exists():
                raise FileNotFoundError("Error generating SVG")

            dsp = FAUSTPy.FAUST(self.path.as_posix(), self.fs)

            self.dsp = dsp

            return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        import shutil

        # delete the temporary directory
        if self.td:
            # if the special file does not exist, throw an error
            if not (Path(self.td) / "pyfaust.txt").exists():
                raise RuntimeError(f"Error deleting temporary directory. {self.td}")
            shutil.rmtree(self.td)
            self.td = None
